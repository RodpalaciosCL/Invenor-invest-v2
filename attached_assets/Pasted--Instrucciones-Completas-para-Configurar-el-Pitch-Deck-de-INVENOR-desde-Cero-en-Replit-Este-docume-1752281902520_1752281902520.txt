# Instrucciones Completas para Configurar el Pitch Deck de INVENOR desde Cero en Replit

Este documento detalla **paso a paso** todo lo que el agente de Replit deberá hacer para generar el sitio de presentación (pitch deck) de INVENOR, usando el repositorio de GitHub y los datos contenidos en el archivo Excel `PROYECTO_CRUCES_AI_V3.xlsx`.

> **Contexto**: INVENOR es una plataforma de detección de cruces ferroviarios no autorizados, con modelo de negocio B2G (Gobiernos municipales) y ya validada con pilotos. El pitch deck mostrará problemas, solución, casos de uso, validación comercial, ranking de comunas por recaudación, indicadores generales y demo.

---

## 1. Preparación del Entorno

1. **Clonar el repositorio**

   ```bash
   git clone https://github.com/RodpalaciosCL/INVENOR.git .
   ```

2. **Subir el archivo Excel**

   * Copiar `PROYECTO_CRUCES_AI_V3.xlsx` a la raíz de Replit.

3. **Instalar dependencias**

   ```bash
   npm install
   ```

---

## 2. Estructura de Carpetas

```
/                   ← raíz del proyecto
├── public/         ← assets estáticos (logos, imágenes)
├── src/
│   ├── components/ ← componentes React modulares
│   │   ├── Hero.tsx
│   │   ├── Cases.tsx
│   │   ├── ChartRanking.tsx
│   │   ├── Indicators.tsx
│   │   ├── DemoVideo.tsx
│   │   ├── Map.tsx
│   │   └── FAQ.tsx
│   ├── data/       ← scripts para parsear Excel a JSON
│   │   └── loadData.ts
│   └── App.tsx     ← punto de entrada de la app
├── PROYECTO_CRUCES_AI_V3.xlsx
├── package.json
├── vite.config.ts
├── tsconfig.json
├── tailwind.config.ts
└── .replit        ← configuración de ejecución en Replit
```

---

## 3. Cargar y Transformar Datos desde el Excel

En `src/data/loadData.ts`:

```ts
import * as XLSX from 'xlsx';

export function loadProjectData() {
  const workbook = XLSX.readFile('PROYECTO_CRUCES_AI_V3.xlsx');
  // Hoja de casos de uso
  const casos = workbook.Sheets['Casos de Uso'];
  const casosData = XLSX.utils.sheet_to_json(casos);

  // Hoja de Ranking
  const ranking = workbook.Sheets['Ranking'];
  const rankingData = XLSX.utils.sheet_to_json(ranking);

  // Hoja de Indicadores
  const indicadores = workbook.Sheets['Indicadores'];
  const indicadoresData = XLSX.utils.sheet_to_json(indicadores);

  return { casosData, rankingData, indicadoresData };
}
```

Luego en `src/App.tsx` importa y pasa los datos a los componentes:

```tsx
import { loadProjectData } from './data/loadData';

function App() {
  const { casosData, rankingData, indicadoresData } = loadProjectData();
  return (
    <>
      <Hero />
      <Cases items={casosData} />
      <ChartRanking data={rankingData} />
      <Indicators data={indicadoresData} />
      <DemoVideo />
      <Map />
      <FAQ />
    </>
  );
}
```

---

## 4. Configuración de Vite + Replit

1. **Modificar `package.json`**

   ```diff
   {
     "scripts": {
   -   "dev": "vite",
   +   "dev": "vite --host 0.0.0.0 --port ${PORT:-5173}",
       "build": "vite build",
       "preview": "vite preview"
     }
   }
   ```

2. **Crear `.replit`** en la raíz:

   ```ini
   language = "nodejs"
   run = "npm install && npm run dev"
   ```

3. **Crear `start.sh`** (opcional) en la raíz:

   ```bash
   #!/usr/bin/env bash
   export PORT=${PORT:-3000}
   npm install
   npm run dev
   ```

   * Luego darle permisos:

     ```bash
     chmod +x start.sh
     ```
   * Y actualizar `.replit`:

     ```ini
     language = "bash"
     run = "bash start.sh"
     ```

---

## 5. Componentes y Secciones del Pitch Deck

A continuación, los **componentes** principales y qué mostrarán:

### 5.1 Hero (Portada)

* Título: "INVENOR"
* Subtítulo: "Detección Inteligente de Cruces Ferroviarios"
* CTA: "Solicitar Demo"
* Imagen de fondo o video breve

### 5.2 Problema & Solución

* **Problema**: Gráfico o bullet points de accidentes e ingresos municipales perdidos
* **Solución**: Texto + iconos que describen:

  * Detección automática
  * Evidencia legal trazada
  * Reportes diarios

### 5.3 Casos de Uso (`Cases.tsx`)

* Recorrer `casosData`, mostrar ícono, título y descripción de cada caso

### 5.4 Validación Técnica & Comercial

* Texto estático validado con Ferronor y municipios pilotos

### 5.5 Ranking de Comunas (`ChartRanking.tsx`)

* Barra horizontal ordenada por valor de recaudación
* Usar Recharts o Chart.js
* Título: "Ranking Comunas (M\$)"
* Tooltip con cifras exactas

### 5.6 Indicadores Generales (`Indicators.tsx`)

* Tarjetas con:

  * Inversión Total (M\$)
  * Utilidad Proyectada (M\$)
  * Comunas Impactadas
  * Red Cubierta (km)
* Datos de `indicadoresData`

### 5.7 Demo INVENOR (`DemoVideo.tsx`)

* Embed de video (YouTube u otro)
* Placeholder si no hay video aún

### 5.8 Mapa de Cruces Monitoreados (`Map.tsx`)

* Placeholder con ícono y bullets resumen
* Posteriormente componente interactivo

### 5.9 Preguntas Frecuentes (`FAQ.tsx`)

* Acordeón con preguntas fijas:

  1. ¿Qué pasa si una comuna se baja?
  2. ¿Cuál es el respaldo legal?
  3. ¿Quién opera el sistema?

### 5.10 Call to Action (Footer)

* Texto: "¿Listo para comenzar?"
* Botón: "Enviar correo"

---

## 6. Estilos y Diseño

* Usar **Tailwind CSS** con configuración oscura + acentos naranja:

  * Fondo global: `bg-gray-900`
  * Texto: `text-white` / `text-gray-300`
  * Acentos: `text-orange-500`, `bg-orange-600`
* **Responsive**: menú hamburguesa en móvil, grillas adaptables para cards
* **Animaciones**: transiciones suaves con Framer Motion (opcional)

---

## 7. Verificación y Ejecución

1. Hacer **Run** en Replit (botón verde)
2. Confirmar que la app levanta en `https://<proyecto>.repl.co`
3. Revisar cada sección, comparar con diseño GitHub (+ captura excel)
4. Ajustar contenidos y estilos según feedback

---

> Con estas instrucciones, el agente de Replit partirá de cero, clonará el repositorio, cargará los datos del Excel, creará toda la estructura React/Tailwind/Vite y configurará el entorno para que el pitch deck de INVENOR funcione perfectamente.

¡Adelante! Sigue cada paso en orden y confirma cada sección antes de avanzar.
